# Ajustar níveis das variáveis categóricas
df$Duration_f <- as.factor(df$Duration_f)
df$CreditAmount_f <- as.factor(df$CreditAmount_f)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/2.Big-Data-Real-Time-Analytics-com-Python-e-Spark/2.Manipulacao_de_Dados_em_Python_com_Numpy")
getwd()
View(df)
## Importando Pacotes
library(readxl)         # carregar arquivos
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
View(dados)
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
str(dados$issue_d)
str(dados$issue_d[2])
str(dados$issue_d[1])
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
str(dados$issue_d[2])
View(dados)
str(dados$issue_d[2])
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
# Diferentemente do Python e NumPy , o R carrega todos os dados como chr e assim não temos valores considerados ausentes e sim como chr ""
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
head(dados$issue_d[2])
head(dados$int_rate[2])
head(dados$int_rate[1])
# Valores chr ""
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\x20-\x7E]", x)))
usewarnings()
usewarnings()
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
View(dados)
# Linhas com caracteres especiais
which(apply(dados, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x))))
# Linhas com caracteres especiais
dados[which(apply(dados, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x)))), ]
# Linhas com caracteres especiais
View(dados[which(apply(dados, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x)))), ])
# Linhas com caracteres especiais
View(dados[which(apply(dados$int_rate, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x)))), ])
# Linhas com caracteres especiais
dados[which(apply(dados$int_rate, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x)))), ]
# Linhas com caracteres especiais
dados[which(apply(dados, 1, function(x) any(grepl("[^A-Za-z0-9 .,;:'\"!?-]", x)))), ]
View(dados)
library(dplyr)
# Vamos primeiramente encontrar o maior valor no dataset ignorando os valores NA
# e somamos 1 para usar como valor coringa
valor_coringa <- max(dados, na.rm = TRUE) + 1
print(valor_coringa)
# Identificando colunas do tipo Numérico
# No R, podemos simplesmente verificar quais colunas são numéricas
colunas_numericas <- sapply(dados, is.numeric)
colunas_numericas
View(dados)
# Calculamos a média para colunas numéricas, ignorando os valores NA
# Isso também ajudará a identificar quais colunas são numéricas
media_ignorando_na <- sapply(dados, function(x) if(is.numeric(x)) mean(x, na.rm = TRUE) else NA)
print(media_ignorando_na)
# Identificando colunas do tipo Numérico
# No R, podemos simplesmente verificar quais colunas são numéricas
colunas_numericas <- sapply(dados, is.numeric)
colunas_numericas
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
# Colunas com valores vazios (chr "")
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
# Identificando colunas numéricas e de string
colunas_numericas <- sapply(dados, function(x) is.numeric(x) || is.integer(x))
colunas_strings <- sapply(dados, is.character)
# Criando um dataframe apenas com colunas numéricas
dados_numericos <- dados[ , colunas_numericas]
# Criando um dataframe apenas com colunas de string
dados_strings <- dados[ , colunas_strings]
# Verificando a estrutura dos novos dataframes
str(dados_numericos)
str(dados_strings)
View(dados)
# Função para limpar e converter coluna com chr "" e chr especiais
limpar_e_converter <- function(coluna) {
# Substituir caracteres especiais e strings vazias por NA
coluna_limpa <- gsub("[^0-9.-]", "", coluna)  # Remove tudo que não é dígito, ponto ou hífen
coluna_limpa[coluna_limpa == ""] <- NA  # Converte strings vazias para NA
# Converter para numérico
as.numeric(coluna_limpa)
}
dados2 <- lapply(dados, limpar_e_converter)
limpar_e_converter <- function(coluna) {
# Verificar se a coluna é do tipo caracter
if (is.character(coluna)) {
# Substituir caracteres especiais e strings vazias por NA
coluna_limpa <- gsub("[^0-9.-]", "", coluna)  # Remove tudo que não é dígito, ponto ou hífen
coluna_limpa[coluna_limpa == ""] <- NA  # Converte strings vazias para NA
# Converter para numérico, se aplicável
return(as.numeric(coluna_limpa))
} else {
# Retornar a coluna original se não for do tipo caracter
return(coluna)
}
}
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
head(dados$issue_d[2])
head(dados$int_rate[1])
#  -> Diferentemente do Python e NumPy , o R carrega todos os dados como chr e assim não temos valores considerados ausentes e sim como chr ""
#### Repetindo o Processo do Estudo de Caso para diferenciar colunas do tipo string das do tipo numérica
## Verificando valores ausentes (aqui serão considerados dados como chr "" e caracteres especiais)
# Colunas com valores vazios (chr "")
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
limpar_e_converter <- function(coluna) {
# Verificar se a coluna é do tipo caracter
if (is.character(coluna)) {
# Substituir caracteres especiais e strings vazias por NA
coluna_limpa <- gsub("[^0-9.-]", "", coluna)  # Remove tudo que não é dígito, ponto ou hífen
coluna_limpa[coluna_limpa == ""] <- NA  # Converte strings vazias para NA
# Converter para numérico, se aplicável
return(as.numeric(coluna_limpa))
} else {
# Retornar a coluna original se não for do tipo caracter
return(coluna)
}
}
# Aplicar a função a cada coluna do dataframe
dados2 <- as.data.frame(lapply(dados, limpar_e_converter))
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
head(dados)
limpar_e_converter <- function(coluna) {
# Verificar se a coluna é do tipo caracter
if (is.character(coluna)) {
# Substituir caracteres especiais e strings vazias por NA
coluna_limpa <- gsub("[^0-9.-]", "", coluna)  # Remove tudo que não é dígito, ponto ou hífen
coluna_limpa[coluna_limpa == ""] <- NA  # Converte strings vazias para NA
# Converter para numérico, se aplicável
return(as.numeric(coluna_limpa))
} else {
# Retornar a coluna original se não for do tipo caracter
return(coluna)
}
}
# Aplicar a função a cada coluna do dataframe
dados2 <- lapply(dados, limpar_e_converter)
# Função para identificar strings vazias e caracteres especiais, substituindo por NA
limpar_colunas <- function(coluna) {
coluna[coluna == ""] <- NA                      # Substituir strings vazias por NA
coluna[grepl("[^\\x20-\\x7E]", coluna)] <- NA   # Substituir strings com caracteres especiais por NA
return(coluna)
}
## Importando Pacotes
library(readxl)         # carregar arquivos
library(dplyr)
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
head(dados$issue_d[2])
head(dados$int_rate[1])
#  -> Diferentemente do Python e NumPy , o R carrega todos os dados como chr e assim não temos valores considerados ausentes e sim como chr ""
#### Repetindo o Processo do Estudo de Caso para diferenciar colunas do tipo string das do tipo numérica
## Verificando valores ausentes (aqui serão considerados dados como chr "" e caracteres especiais)
# Colunas com valores vazios (chr "")
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
# Função para identificar strings vazias e caracteres especiais, substituindo por NA
limpar_colunas <- function(coluna) {
coluna[coluna == ""] <- NA                      # Substituir strings vazias por NA
coluna[grepl("[^\\x20-\\x7E]", coluna)] <- NA   # Substituir strings com caracteres especiais por NA
return(coluna)
}
# Aplicar a função a cada coluna do dataframe
dados_limpos <- lapply(dados, limpar_colunas)
dados_limpos
# Aplicar a função a cada coluna do dataframe
dados_limpos <- as.data.frame(lapply(dados, limpar_colunas))
View(dados_limpos)
dim(dados_limpos)
dim(dados)
View(dados)
View(dados_limpos)
# Função ajustada para limpar colunas com critérios específicos
limpar_colunas <- function(coluna, nome_coluna) {
# Substituir strings vazias por NA para todas as colunas
coluna[coluna == ""] <- NA
# Para a coluna int_rate, substituir strings com caracteres especiais por NA
if (nome_coluna == "int_rate") {
coluna[grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
# Aplicar a função a cada coluna do dataframe, passando o nome da coluna como argumento
dados_limpos <- mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE)
# Aplicar a função a cada coluna do dataframe, passando o nome da coluna como argumento
dados_limpos <- as.data.framemapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
# Aplicar a função a cada coluna do dataframe, passando o nome da coluna como argumento
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
View(dados_limpos)
View(dados_limpos)
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
head(dados)
head(dados$issue_d)
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
head(dados)
head(dados$int_rate)
# Função ajustada para limpar colunas com critérios específicos
limpar_colunas <- function(coluna, nome_coluna) {
# Substituir strings vazias por NA para todas as colunas
coluna[coluna == ""] <- NA
# Para a coluna int_rate, substituir strings com caracteres especiais por NA
if (nome_coluna == "int_rate") {
coluna[grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
# Aplicar a função a cada coluna do dataframe, passando o nome da coluna como argumento
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
head(dados_limpos)
head(dados_limpos$int_rate)
# Função ajustada para limpar colunas com critérios específicos
limpar_colunas <- function(coluna, nome_coluna) {
# Substituir strings vazias por NA para todas as colunas
coluna[coluna == ""] <- NA
# Para a coluna int_rate, substituir strings com caracteres especiais por NA
if (nome_coluna == "int_rate") {
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
# Aplicar a função a cada coluna do dataframe, passando o nome da coluna como argumento
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
head(dados_limpos$int_rate)
# Verificando a estrutura do novo dataframe
str(dados_limpos)
# Função para testar se uma coluna pode ser convertida para numérico
pode_ser_numerico <- function(coluna) {
# Tentar converter a coluna para numérico
numerico_tentativa <- suppressWarnings(as.numeric(coluna))
# Verificar se a conversão foi bem-sucedida, ignorando NA
todos_NA_ou_numericos <- all(is.na(numerico_tentativa) | !is.na(as.numeric(coluna)))
return(todos_NA_ou_numericos)
}
# Aplicar a função a todas as colunas e determinar quais podem ser numéricas
colunas_para_numerico <- sapply(dados_limpos, pode_ser_numerico)
str(dados_limpos)
head(dados_limpos)
# Função para testar se uma coluna pode ser convertida para numérico
pode_ser_numerico <- function(coluna) {
# Tentar converter a coluna para numérico
numerico_tentativa <- suppressWarnings(as.numeric(coluna))
# Verificar se a conversão foi bem-sucedida, ignorando NA
todos_NA_ou_numericos <- all(is.na(numerico_tentativa) | !is.na(as.numeric(coluna)))
return(todos_NA_ou_numericos)
}
# Aplicar a função a todas as colunas e determinar quais podem ser numéricas
colunas_para_numerico <- sapply(dados_limpos, pode_ser_numerico)
# Converter colunas que podem ser numéricas, ignorando NA e caracteres especiais
converter_para_numerico <- function(coluna) {
# Tentar converter para numérico, ignorando erros e avisos
tentativa <- suppressWarnings(suppressMessages(as.numeric(coluna)))
# Se a conversão não gerou apenas NA (exceto os já presentes), assumir que pode ser numérica
if (!all(is.na(tentativa)) || all(coluna == "" | is.na(coluna))) {
return(tentativa)
} else {
return(coluna)
}
}
# Aplicar a função em todas as colunas do dataframe
dados_convertidos <- lapply(dados_limpos, converter_para_numerico)
str(dados_limpos)
colunas_para_converter <- c("id", "loan_amnt", "funded_amnt", "int_rate", "installment", "total_pymnt") # Lista das colunas para converter para numérico
# Loop pelas colunas especificadas e converter para numérico
for (coluna in colunas_para_converter) {
dados_limpos[[coluna]] <- as.numeric(dados_limpos[[coluna]])
}
# Verificar a estrutura do dataframe após a conversão
str(dados_limpos)
# Função ajustada para limpar colunas com critérios específicos (iremos adicionar valores NA para chr"" e coluna int_rate)
limpar_colunas <- function(coluna, nome_coluna) {
coluna[coluna == ""] <- NA                                         # Substituir strings vazias por NA para todas as colunas
if (nome_coluna == "int_rate" || name_coluna == "total_pymnt") {   # Para a coluna int_rate, substituir strings com caracteres especiais por NA
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
head(dados$issue_d)
head(dados$int_rate)
#  -> Diferentemente do Python e NumPy , o R carrega todos os dados como chr e assim não temos valores considerados ausentes e sim como chr ""
#### Repetindo o Processo do Estudo de Caso para diferenciar colunas do tipo string das do tipo numérica
## Verificando valores ausentes (aqui serão considerados dados como chr "" e caracteres especiais)
# Colunas com valores vazios (chr "")
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
## Início Tratamento Valores Ausentes
# Função ajustada para limpar colunas com critérios específicos (iremos adicionar valores NA para chr"" e coluna int_rate)
limpar_colunas <- function(coluna, nome_coluna) {
coluna[coluna == ""] <- NA                                         # Substituir strings vazias por NA para todas as colunas
if (nome_coluna == "int_rate" || name_coluna == "total_pymnt") {   # Para a coluna int_rate, substituir strings com caracteres especiais por NA
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
dim(dados)
## Verificando Dados Ausentes
colSums(is.na(dados))
head(dados)
head(dados$issue_d)
head(dados$int_rate)
#  -> Diferentemente do Python e NumPy , o R carrega todos os dados como chr e assim não temos valores considerados ausentes e sim como chr ""
#### Repetindo o Processo do Estudo de Caso para diferenciar colunas do tipo string das do tipo numérica
## Verificando valores ausentes (aqui serão considerados dados como chr "" e caracteres especiais)
# Colunas com valores vazios (chr "")
sapply(dados, function(x) sum(x == ""))
# Colunas com caracteres especiais
sapply(dados, function(x) sum(grepl("[^\\x20-\\x7E]", x)))
## Início Tratamento Valores Ausentes
# Função ajustada para limpar colunas com critérios específicos (iremos adicionar valores NA para chr"" e coluna int_rate)
limpar_colunas <- function(coluna, nome_coluna) {
coluna[coluna == ""] <- NA                                         # Substituir strings vazias por NA para todas as colunas
if (nome_coluna == "int_rate" || nome_coluna == "total_pymnt") {   # Para a coluna int_rate, substituir strings com caracteres especiais por NA
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
View(dados_limpos)
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
str(dados)
# Função ajustada para limpar colunas com critérios específicos (iremos adicionar valores NA para chr"" e coluna int_rate)
limpar_colunas <- function(coluna, nome_coluna) {
coluna[coluna == ""] <- NA                                         # Substituir strings vazias por NA para todas as colunas
if (nome_coluna == "int_rate" || nome_coluna == "total_pymnt") {   # Para a coluna int_rate, substituir strings com caracteres especiais por NA
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
colunas_para_converter <- c("id", "loan_amnt", "funded_amnt", "int_rate", "installment", "total_pymnt") # Lista das colunas para converter para numérico
# Loop pelas colunas especificadas e converter para numérico
for (coluna in colunas_para_converter) {
dados_limpos[[coluna]] <- as.numeric(dados_limpos[[coluna]])
}
# Verificar a estrutura do dataframe após a conversão
str(dados_limpos)
#### Carregando dados
dados <- data.frame(read.csv2("datasets/dataset1.csv"))
# Função ajustada para limpar colunas com critérios específicos (iremos adicionar valores NA para chr"" e coluna int_rate)
limpar_colunas <- function(coluna, nome_coluna) {
coluna[coluna == ""] <- NA                                         # Substituir strings vazias por NA para todas as colunas
if (nome_coluna == "int_rate" || nome_coluna == "installment") {   # Para a coluna int_rate, substituir strings com caracteres especiais por NA
coluna[!grepl("[^\\x20-\\x7E]", coluna)] <- NA
}
return(coluna)
}
dados_limpos <- as.data.frame(mapply(limpar_colunas, dados, names(dados), SIMPLIFY = FALSE))
head(dados_limpos)
str(dados_limpos)
colunas_para_converter <- c("id", "loan_amnt", "funded_amnt", "int_rate", "installment", "total_pymnt") # Lista das colunas para converter para numérico
# Loop pelas colunas especificadas e converter para numérico
for (coluna in colunas_para_converter) {
dados_limpos[[coluna]] <- as.numeric(dados_limpos[[coluna]])
}
# Verificar a estrutura do dataframe após a conversão
str(dados_limpos)
View(dados_limpos)
